unit U_Sort_02; //Insertion Sort

interface

uses U_Sort, FMX.Layouts, System.Classes, Winapi.Windows, FMX.Dialogs,
  FMX.Objects, System.SysUtils;

type
  TSort02 = class(TSort)
  private
    procedure sort(layout01 : TLayout);

  public
    constructor Create(layout01 : TLayout);
  end;

implementation

{ TSort02 }

constructor TSort02.Create(layout01: TLayout);
begin
  inherited Create(layout01);
  sleep(2000);
  sort(layout01);

end;

//procedure TSort02.sort(layout01: TLayout);
//var
//  i, j : Integer;
//  ret01 : TRetangulo;
//  ret02 : TRetangulo;
//  x : TRetangulo;
//  nomeX : String;
//  tamanhoX : Integer;
//
//begin
//
//  i := Distancia * 2;
//  while (i < Round(layout01.Width)) do
//  begin
//    x := TRetangulo(layout01.FindComponent('Ret' + intToStr(i)));
//    nomeX := 'Ret' + intToStr(i);
//    tamanhoX := Round(x.Height);
//    j := i - Distancia;
////    ret01 := TRectangle(layout01.FindComponent('Ret' + intToStr(0)));
////    troca01(ret01, x);
//    ret02 := TRetangulo(layout01.FindComponent('Ret' + intToStr(j)));
//
//    while ((Round(ret02.Height) > tamanhoX) and (j > 0)) do
//    begin
//      ret01 := TRetangulo(layout01.FindComponent('Ret' + intToStr(j + Distancia)));
//      ret02 := TRetangulo(layout01.FindComponent('Ret' + intToStr(j)));
//      troca01(ret01, ret02);
//
//      dec(j, Distancia);
//
//    end;
//
//    ret01 :=TRetangulo(layout01.FindComponent('Ret' + intToStr(j + Distancia)));
//    x := TRetangulo(layout01.FindComponent(nomeX));
//    troca01(ret01, x);
//
//    inc(i, Distancia);
//
//  end;
//
//end;

procedure TSort02.sort(layout01: TLayout);
var
  i, j : Integer;
  ret01 : TRetangulo;
  ret02 : TRetangulo;
  x : TRetangulo;
  nomeX : String;
  tamanhoX : Integer;
  key : Single;
//  key : TRetangulo;
  keyPos : Integer;

begin
  for j := 2 to 49 do
  begin
    key := findRectangle(j).Height;
    keyPos := findRectangle(j).Posicao;

//    key := TRetangulo.Create(findRectangle(j));
//    key.Assign(TPersistent(findRectangle(j)));
    i := j - 1;

    while ((i > 0) and (findRectangle(i).Height > key)) do
    begin
      troca02(findRectangle(i + 1), findRectangle(i), findRectangle(i).Height);
      dec(i, 1);

    end;
//    troca02(findRectangle(i + 1), findRectangle(keyPos), key);
//    key.free;

  end;




end;

end.
